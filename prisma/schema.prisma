generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id         String       @id @default(uuid())
  nik        String       @unique
  password   String       @default("$2b$10$8i4.tmBGcK619R.lL6goi.GBRA3E7y25fARKYRqIPR46PjwlPV9eu")
  firstName  String
  lastName   String
  email      String       @unique
  phoneNum   String?      @unique
  Address    String?
  degree     String?
  major      Major?
  token      String?      @unique
  createdBy  String?
  updatedBy  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?
  Curriculum Curriculum[]
  Rps        Rps[]

  @@unique([firstName, lastName])
  @@index([email])
}

model Student {
  id                     String                 @id @default(uuid())
  reg_num                String?                @unique
  nim                    String                 @unique
  password               String                 @default("$2b$10$8i4.tmBGcK619R.lL6goi.GBRA3E7y25fARKYRqIPR46PjwlPV9eu")
  firstName              String
  lastName               String?
  dateOfBirth            DateTime?              @db.Date
  gender                 gender
  religion               String?
  studentEmail           String?                @unique
  curriculumId           String?
  arrivalYear            String?
  address                String?
  currentResidenceStatus String?
  status                 StudentStatus          @default(ACTIVE)
  personalEmail          String?                @unique
  faculty                String?
  major                  Major?
  majorGlobalId          String?
  graduate_year          String?
  phoneNo                String?
  areaOfConcentration    Area_Of_Concentration?
  token                  String?                @unique
  guardianName           String?
  familyRelation         String?
  guardianEmail          String?
  guardianPhoneNo        String?
  createdBy              String?
  updatedBy              String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime?
  filename               String?
  path                   String?
  biodataCheck           Boolean                @default(false)
  ClassStudent           ClassStudent[]
  curriculum             Curriculum?            @relation(fields: [curriculumId], references: [id])
  MajorGlobal            MajorGlobal?           @relation(fields: [majorGlobalId], references: [id])
  StudentGrade           StudentGrade[]

  @@unique([firstName, lastName])
  @@index([studentEmail, personalEmail])
}

model MajorGlobal {
  id        String    @id
  shortName String
  name      String
  Student   Student[]
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String
  role      Role      @default(MAHASISWA)
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@unique([userId, role])
}

model Curriculum {
  id                   String               @id @default(uuid())
  major                String               @db.VarChar(100)
  year                 String               @db.Char(4)
  headOfProgramStudyId String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  Cpl                  Cpl[]
  headOfProgramStudy   Employee             @relation(fields: [headOfProgramStudyId], references: [id])
  Curriculum_Subject   Curriculum_Subject[]
  student              Student[]

  @@unique([major, year])
}

model Subject {
  id                 String               @id @default(uuid())
  code               String               @unique
  englishName        String
  indonesiaName      String
  credits            Int
  type               SubjectType
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Curriculum_Subject Curriculum_Subject[]
  Rps                Rps[]
  Subject_Cpl        Subject_Cpl[]
}

model Curriculum_Subject {
  id           String     @id @default(uuid())
  curriculumId String
  subjectId    String
  semester     Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  prerequisite String[]
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  subject      Subject    @relation(fields: [subjectId], references: [id])

  @@unique([curriculumId, subjectId])
}

model Cpl {
  id           String         @id @default(uuid())
  code         String
  description  String
  curriculumId String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  curriculum   Curriculum     @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  Subject_Cpl  Subject_Cpl[]
  SupportedCpl SupportedCpl[]

  @@unique([code, curriculumId])
}

model Subject_Cpl {
  id        String   @id @default(uuid())
  subjectId String
  cplId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cpl       Cpl      @relation(fields: [cplId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id])

  @@unique([subjectId, cplId])
}

model Cpmk {
  id           String         @id @default(cuid())
  code         String
  rpsId        String
  description  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  rps          Rps            @relation(fields: [rpsId], references: [id], onDelete: Cascade)
  SupportedCpl SupportedCpl[]

  @@unique([rpsId, code])
}

model CpmkGrading {
  id                 String          @id @default(uuid())
  rpsId              String
  code               String
  totalGradingWeight Int
  Rps                Rps             @relation(fields: [rpsId], references: [id], onDelete: Cascade)
  GradingSystem      GradingSystem[]

  @@unique([rpsId, code])
}

model GradingSystem {
  id            String         @id @default(uuid())
  cpmkGradingId String
  gradingName   String
  gradingWeight Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  CpmkGrading   CpmkGrading    @relation(fields: [cpmkGradingId], references: [id], onDelete: Cascade)
  StudentGrade  StudentGrade[]
}

model StudentGrade {
  id              String        @id @default(uuid())
  rawGrade        Float
  score           Float
  calculateGrade  Float?
  studentNim      String
  gradingSystemId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  GradingSystem   GradingSystem @relation(fields: [gradingSystemId], references: [id], onDelete: Cascade)
  Student         Student       @relation(fields: [studentNim], references: [nim])

  @@unique([studentNim, gradingSystemId], name: "studentGradeId")
}

model SupportedCpl {
  cpmkId String
  cplId  String
  cpl    Cpl    @relation(fields: [cplId], references: [id], onDelete: Cascade)
  cpmk   Cpmk   @relation(fields: [cpmkId], references: [id], onDelete: Cascade)

  @@unique([cpmkId, cplId])
}

model Rps {
  id                    String                  @id @default(uuid())
  subjectFamily         String
  subjectDescription    String
  parallel              String                  @db.Char(1)
  schedule              String
  rpsDeveloper          String
  headOfExpertise       String
  headOfProgramStudy    String
  mainReferences        String[]
  supportingReferences  String[]
  software              String
  hardware              String
  teamTeaching          String[]
  minPassStudents       String
  minPassGrade          String
  subjectId             String
  teacherId             String
  status                status                  @default(WAITING)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  approvedAt            DateTime?
  ClassStudent          ClassStudent[]
  Cpmk                  Cpmk[]
  CpmkGrading           CpmkGrading[]
  MeetingPlan           MeetingPlan[]
  ReportDetail          ReportDetail?
  ReportSummary         ReportSummary?
  Subject               Subject                 @relation(fields: [subjectId], references: [id])
  teacher               Employee                @relation(fields: [teacherId], references: [id])
  StudentAssignmentPlan StudentAssignmentPlan[]
}

model ClassStudent {
  id         String  @id @default(uuid())
  studentNim String
  rpsId      String
  Rps        Rps     @relation(fields: [rpsId], references: [id], onDelete: Cascade)
  Student    Student @relation(fields: [studentNim], references: [nim])

  @@unique([studentNim, rpsId])
}

model MeetingPlan {
  id                    String   @id @default(uuid())
  week                  String
  cpmkList              String[]
  subCpmkDescription    String
  achievementIndicators String
  assessmentModel       String
  material              String
  method                String
  offlineActivity       String
  onlineActivity        String
  rpsId                 String
  rps                   Rps      @relation(fields: [rpsId], references: [id], onDelete: Cascade)
}

model StudentAssignmentPlan {
  id                    String @id @default(uuid())
  assignmentModel       String
  references            String
  subLearningOutcomes   String
  assignmentDescription String
  icbValuation          String
  dueSchedule           String
  others                String
  referenceList         String
  rpsId                 String
  rps                   Rps    @relation(fields: [rpsId], references: [id], onDelete: Cascade)
}

model ReportSummary {
  rpsId            String   @unique
  subjectName      String
  curriculum       String
  major            String
  credits          Int
  parallel         String   @db.Char(1)
  status           String
  semester         String
  teacher          String
  schedule         String
  highestCpmk      Json
  lowestCpmk       Json
  cpmkGradeSummary Json
  studentCpmkGrade Json
  createAt         DateTime @default(now())
  updateAt         DateTime
  Rps              Rps      @relation(fields: [rpsId], references: [id], onDelete: Cascade)
}

model ReportDetail {
  rpsId         String   @unique
  subjectName   String
  major         String
  credits       Int
  parallel      String   @db.Char(1)
  teacher       String
  schedule      String
  gradingSystem Json
  studentGrade  Json
  createAt      DateTime @default(now())
  updateAt      DateTime
  Rps           Rps      @relation(fields: [rpsId], references: [id], onDelete: Cascade)
}

model AssessmentIndicator {
  id          String   @id @default(uuid())
  letter      String   @db.Char(1)
  minScore    Int
  maxScore    Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Major {
  SI
  IF
  DKV
  TI
  NONE
}

enum StudentStatus {
  GRADUATE
  ACTIVE
  INACTIVE
}

enum gender {
  MALE
  FEMALE
}

enum Thesis_Approve {
  Waiting
  Approve
  Rejected
}

enum Submission_Approve {
  Waiting
  Approve
  Rejected
}

enum Classroom_Name {
  Proposal
  Skripsi
}

enum Semester {
  Ganjil
  Genap
  Padat
}

enum Progress {
  Submission
  Proposal
  Skripsi
  Finished
}

enum Consultation_Status {
  Proposal
  Skripsi
}

enum status {
  WAITING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  SUPER_ADMIN
  MAHASISWA
  ADMIN_LPMI
  OPERATOR_LPMI
  ALUMNI
  DEKAN
  KAPRODI
  DOSEN
  DOSEN_MK
  OPERATOR_FAKULTAS
  SEKRETARIS
  REGISTER
}

enum Exam_Conclution {
  Rejected
  Approve
}

enum Changes_Conclusion {
  Major
  Minor
}

enum Pass {
  Pass
  Fail
  Repeat
}

enum Revision_Approve {
  Waiting
  Approve
  Rejected
}

enum ConsultationStatus {
  Waiting
  OnProcess
  Complete
}

enum ActivityType {
  GUIDANCE_CLASS
  MAJOR
  FACULTY
}

enum SubjectType {
  Prerequisite
  Major
  General
  Basic
  Elective
}

enum Area_Of_Concentration {
  OBJECT_PROGRAMMER
  COMPETITIVE_INTELEGENT_ANALYSIS
  NETWORK_ADMINISTRATOR
}

enum Certificate_Category {
  PENALARAN_KEILMUAN
  ORGANISASI_KEPEMIMPINAN
  BAKAT_MINAT
  PENGABDIAN_MASYARAKAT
  OTHER
}

enum Certificate_Level {
  INTERNATIONAL
  NATIONAL
  REGION
  UNIVERSITY
  MAJOR
}
